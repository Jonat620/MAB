import turtle
import os
import math

# beg user interface
def MUI():
    pass

# main game 
def Main():
    
    #screen stuffs
    wn = turtle.Screen()
    wn.bgcolor("black")
    wn.title("Maze Game")
    wn.setup(700,700)
    
    #create pen
    class Pen(turtle.Turtle):
        def __init__(self):
            turtle.Turtle.__init__(self)
            self.shape('square')
            self.color('grey')
            self.penup()
            self.speed(0)

    # player class
    class Player(turtle.Turtle):
            def __init__(self):
                turtle.Turtle.__init__(self)
                self.shape("square")
                self.color("blue")
                self.penup()
                self.speed(0)
                
             # player controls
            def go_up(self):
                move_to_x = player.xcor()
                move_to_y = player.ycor() + 20
         
                if (move_to_x, move_to_y) not in walls:
                    self.goto(move_to_x, move_to_y)
         
            def go_down(self):
                move_to_x = player.xcor()
                move_to_y = player.ycor() - 20
         
                if (move_to_x, move_to_y) not in walls:
                    self.goto(move_to_x, move_to_y)
         
            def go_left(self):
                move_to_x = player.xcor() - 20
                move_to_y = player.ycor()
         
                if (move_to_x, move_to_y) not in walls:
                    self.goto(move_to_x, move_to_y) 
         
            def go_right(self):
                move_to_x = player.xcor() + 20
                move_to_y = player.ycor()
         
                if (move_to_x, move_to_y) not in walls:
                    self.goto(move_to_x, move_to_y)
         
            def is_collision(self, other):
                    
                a = self.xcor()-other.xcor()
                b = self.ycor()-other.ycor()
                distance = math.sqrt((a ** 2) + (b ** 2) )
         
                if distance < 5:
                    return True
                else:
                    return False

    
    class tile(turtle.Turtle):
        def __init__(self, color):
            turtle.Turtle.__init__(self)
            self.shape("square")
            self.color(color)
            self.penup()
            self.speed(0)
                
     
    class False_walls(turtle.Turtle):
        def __init__(self, x, y, color):
            turtle.Turtle.__init__(self)
            self.shape("square")
            self.color(color)
            self.penup()
            self.speed(0)
            self.goto(x, y)

    class Pen1(turtle.Turtle):
        def __init__(self):
            turtle.Turtle.__init__(self)
            self.shape("square")
            self.color('tan4')
            self.penup()
            self.speed(0)
     
    #create level list
    levels = [""]
     
    #define first level
    level_1 = [
    "##########################",
    "#                    ffff#",
    "#  P  fffffffFFf         #",
    "#     frrrrrrrrf     f   #",
    "#     ffffffffff     f   #",
    "#ff            fff  fff  #",
    "#        ffff            #",
    "#    f   ffff            #",
    "#rrfff         fffrrfff  #",
    "#rrrrfffffFFffffrrrrrf   #",
    "#rrrrfrrrrrrrrrfrrrrrf   #",
    "#ffrrfrrrrrrrrrfrrrrrf   #",
    "#fffffffffFFfffffffffff  #",
    "#      frrrrrrf       f  #",
    "#ff    ffrrffff         f#",
    "#ff               P      #",
    "#fffffffffffff        fff#",
    "#frrrrrrrrrrrr          f#",
    "#fffffffffffffffff       #",
    "##########################",
    ]
     
    ticol=[]
    falwal=[]
    levels.append(level_1)
     
    def setup_maze(level):
     
        for y in range(len(level)):
            for x in range(len(level[y])):
     
                character = level[y][x]
                screen_x = -288 + (x * 20)
                screen_y = 288 - (y * 20)
     
                if character == "#":
                    pen.goto(screen_x, screen_y)
                    pen.stamp()
                    walls.append((screen_x, screen_y))
     
                if character == "P":
                    player.goto(screen_x, screen_y)
     
                if character == "F":
                    falwal.append(False_walls(screen_x, screen_y, 'tan4'))

                if character=='f':
                    pen1.goto(screen_x, screen_y)
                    pen1.stamp()
                    walls.append((screen_x, screen_y))

                if character=='r':
                    til.goto(screen_x, screen_y)
                    til.stamp()
                    ticol.append((screen_x, screen_y))
     
    #class object
    pen = Pen()
    til=tile('brown')
    pen1=Pen1()
    player = Player()
    
    #walls
    walls = []
     
    #Set up the level
    setup_maze(levels[1])
     
    #keyboard binding
    wn.listen()
    wn.onkey(player.go_left,"a")
    wn.onkey(player.go_right,"d")
    wn.onkey(player.go_up,"w")
    wn.onkey(player.go_down,"s")
     
    wn.tracer(0)
     
    #game loop
    while True:
        wn.update()

Main()


